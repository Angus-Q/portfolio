---
// src/components/ViewCounter.astro
interface Props {
  slug: string;
}
const { slug } = Astro.props;
---
<div class="view-counter text-sm text-gray-500">
  <span id="view-count-value">--</span> views
</div>

<script define:vars={{ slug }}>
  document.addEventListener('DOMContentLoaded', async () => {
    const viewCountSpan = document.getElementById('view-count-value');
    if (!viewCountSpan) return;

    // 1. Create a unique key for this article in localStorage.
    const storageKey = `viewed-newsletter-${slug}`;

    // 2. Check if the user has already viewed this article on this browser.
    const hasViewed = localStorage.getItem(storageKey);

    let endpoint = `/api/views/${slug}`;
    let options = {};

    if (hasViewed) {
      // 3. If they HAVE viewed it, we only FETCH the current count (GET request).
      // We don't increment it.
      options = { method: 'GET' };
    } else {
      // 4. If they HAVE NOT viewed it, we INCREMENT the count (POST request).
      options = { method: 'POST' };
    }

    try {
      const response = await fetch(endpoint, options);
      if (!response.ok) {
        throw new Error('Failed to fetch view count');
      }
      const data = await response.json();
      viewCountSpan.textContent = data.views.toLocaleString();

      // 5. If this was a new view (a successful POST), set the flag
      // in localStorage so they won't be counted again on refresh.
      if (!hasViewed) {
        localStorage.setItem(storageKey, 'true');
      }
    } catch (error) {
      console.error('View Counter Error:', error);
      viewCountSpan.textContent = 'N/A';
    }
  });
</script>