---
import { getCollection } from 'astro:content';
import BaseLayout from '../../../layouts/BaseLayout.astro';
import PageHeader from '../../../components/PageHeader.astro';

export const prerender = true;

export async function getStaticPaths() {
  const allNewsletters = await getCollection('newsletter');
  
  // Handle case where no newsletters are found
  if (!allNewsletters || allNewsletters.length === 0) {
    return [];
  }
  
  // Group newsletters by year and month
  const groupedNewsletters = new Map<string, any[]>();
  
  allNewsletters.forEach(newsletter => {
    const date = newsletter.data.publishDate;
    const year = date.getFullYear().toString();
    const month = date.toLocaleString('default', { month: 'long' }).toLowerCase();
    const key = `${year}-${month}`;
    
    if (!groupedNewsletters.has(key)) {
      groupedNewsletters.set(key, []);
    }
    groupedNewsletters.get(key)!.push(newsletter);
  });
  
  // Create paths for each year/month combination
  const paths: Array<{params: {year: string, month: string}, props: {newsletters: any[]}}> = [];
  groupedNewsletters.forEach((newsletters, key) => {
    const [year, month] = key.split('-');
    paths.push({
      params: { year, month },
      props: { newsletters }
    });
  });
  
  return paths;
}

const { year, month } = Astro.params;
const { newsletters } = Astro.props;

// Add safety check and sort newsletters by date descending
const sortedNewsletters = (newsletters && newsletters.length > 0) 
  ? newsletters.sort((a: any, b: any) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf())
  : [];

const monthNames: Record<string, string> = {
  'january': 'January', 'february': 'February', 'march': 'March',
  'april': 'April', 'may': 'May', 'june': 'June',
  'july': 'July', 'august': 'August', 'september': 'September',
  'october': 'October', 'november': 'November', 'december': 'December'
};
---

<BaseLayout title={`${monthNames[month]} ${year} Newsletter - Angus Quigley`}>
    <PageHeader 
        title={`${monthNames[month]} ${year}`}
        description={`Newsletter issues from ${monthNames[month]} ${year} - ${newsletters?.length || 0} ${(newsletters?.length || 0) === 1 ? ' issue' : ' issues'} published.`}
    />
    
    <div class="fade-in-on-load">
        <section class="py-16 md:py-24 bg-white">
            <div class="container mx-auto px-4">
                <div class="max-w-4xl mx-auto">
                    <!-- Back navigation -->
                    <div class="mb-8">
                        <a href="/newsletter" class="inline-flex items-center text-main font-medium hover:text-accent transition-colors">
                            <i class="fas fa-arrow-left mr-2"></i>
                            Back to All Newsletters
                        </a>
                    </div>
                    
                    <!-- Newsletter grid -->
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                        {sortedNewsletters.length > 0 ? sortedNewsletters.map((newsletter, index) => (
                            <article class={`stagger-item bg-white rounded-2xl shadow-lg border border-gray-100 overflow-hidden hover:shadow-xl transition-all duration-300 hover:-translate-y-1`}>
                                {newsletter.data.image && (
                                    <div class="aspect-video overflow-hidden">
                                        <img 
                                            src={newsletter.data.image.src} 
                                            alt={newsletter.data.image.alt}
                                            class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                                        />
                                    </div>
                                )}
                                
                                <div class="p-8">
                                    <div class="flex items-start justify-between mb-4">
                                        <time class="text-sm font-semibold text-gray-500 uppercase tracking-wider">
                                            {newsletter.data.publishDate.toLocaleDateString('en-US', { 
                                                year: 'numeric', 
                                                month: 'long', 
                                                day: 'numeric' 
                                            })}
                                        </time>
                                    </div>
                                    
                                    <h2 class="font-serif text-2xl font-bold text-main mb-4 leading-tight">
                                        <a href={`/newsletter/${newsletter.slug}`} class="hover:text-accent transition-colors">
                                            {newsletter.data.title}
                                        </a>
                                    </h2>
                                    
                                    <p class="text-gray-600 leading-relaxed mb-6">
                                        {newsletter.data.description}
                                    </p>
                                    
                                    <a href={`/newsletter/${newsletter.slug}`} class="inline-block text-main font-medium link-underline hover:text-accent">
                                        Read More â†’
                                    </a>
                                </div>
                            </article>
                        )) : (
                            <div class="col-span-full text-center py-16">
                                <p class="text-gray-600 text-lg">No newsletter issues found for {monthNames[month]} {year}.</p>
                            </div>
                        )}
                    </div>
                </div>
            </div>
        </section>
    </div>
</BaseLayout>
